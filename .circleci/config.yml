---
# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

commands:
  cached-checkout:
    description: "A checkout command using cache automatically"
    steps:
      - restore_cache:
          keys:
            - v1-source-{{ .Branch }}-{{ .Revision }}
            - v1-source-{{ .Branch }}-
            - v1-source-
      - checkout
      - save_cache:
          key: v1-source-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"

executors:
  node-testing:
    docker:
      # Using the LTS v10 (dubnium) image
      - image: circleci/node:dubnium-browsers
  browser-testing:
    docker:
      # Using CIRCLECI's python image with browsers testing baked in
      # (geckodriver & chrome are relevant for us)
      - image: circleci/python:3.7.3-stretch-browsers

jobs:
  basic-testing:
    executor: node-testing
    working_directory: ~/repo

    steps:
      - cached-checkout

      # Download and cache node dependencies
      - restore_cache:
          keys:
            - v1-nodedeps-{{ .Branch }}-{{ checksum "package.json" }}
            - v1-nodedeps-{{ .Branch }}-
            - v1-nodedeps-
      - run:
          name: Check for outdated dependencies
          command: yarn install --frozen-lockfile
      - run: yarn install --pure-lockfile
      - save_cache:
          paths:
            - node_modules
          key: v1-nodedeps-{{ .Branch }}-{{ checksum "package.json" }}

      # Persist required files for building the webext pack
      # (web-ext tool from node_modules)
      - persist_to_workspace:
          root: .
          paths:
            - node_modules/

      - run:
          name: Lint Code
          command: yarn run lint
      - run:
          name: Lint Error and String codes
          command: python ./tools/logs_codes.py
      - run:
          name: Lint functions to replace
          command: python ./tools/functions_replacement.py
      - run:
          name: Lint Extension
          command: ./node_modules/.bin/web-ext -s web-extension/ lint

  build-ext:
    executor: node-testing
    working_directory: ~/repo
    steps:
      - cached-checkout
      - attach_workspace:
          at: /tmp/ws

      - run:
          name: Setup manifest
          command: python3 setup.py ${BROWSER}
      - run:
          name: Package Extension
          command: /tmp/ws/node_modules/.bin/web-ext -s web-extension/ -a ./build-${BROWSER}/ build

      # Persist packed webext for functional testing
      - persist_to_workspace:
          root: .
          paths:
            - build-*


  setup-testing:
    executor: browser-testing
    working_directory: ~/repo
    steps:
      - cached-checkout

      # Install python deps
      - restore_cache:
          keys:
            - v2-pydeps-{{ .Branch }}-{{ checksum "requirements.txt" }}
            - v2-pydeps-{{ .Branch }}-
            - v2-pydeps-
      - run: pip3 install virtualenv
      - run: virtualenv venv
      - run: ./venv/bin/pip3 install -r requirements.txt
      - run: virtualenv --relocatable ./venv
      - save_cache:
          paths:
            - venv
          key: v2-pydeps-{{ checksum "requirements.txt" }}

      # Persist required files for functional testing to the workspace
      - persist_to_workspace:
          root: .
          paths:
            - venv/

  test-browser-common:
    executor: browser-testing
    working_directory: ~/repo
    steps:
      - cached-checkout
      - attach_workspace:
          at: /tmp/ws

      # Work-around to define env variables from another, for the subsequent
      # steps.
      #  - Useful for firefox driver which relies on packaged extension
      - run:
          name: Define Packed Webext path
          command: |
            echo 'export WEBEXT_DIR="/tmp/ws/build-${BROWSER}"' >> $BASH_ENV
      - run:
          name: Setup manifest
          command: python3 setup.py ${BROWSER}
      - run:
          command: /tmp/ws/venv/bin/pytest -v -s --browser ${BROWSER} tests/func/test_00*

  test-browser:
    executor: browser-testing
    working_directory: ~/repo
    steps:
      - cached-checkout
      - attach_workspace:
          at: /tmp/ws

      # Work-around to define env variables from another, for the subsequent
      # steps.
      #  - Useful for firefox driver which relies on packaged extension
      - run:
          name: Define Packed Webext path
          command: |
            echo 'export WEBEXT_DIR="/tmp/ws/build-${BROWSER}"' >> $BASH_ENV
      - run:
          name: Setup manifest
          command: python3 setup.py ${BROWSER}
      - run:
          command: /tmp/ws/venv/bin/pytest -v -s --browser ${BROWSER} --reader ${READER} --ignore-glob='tests/func/test_00*'

workflows:
  version: 2
  pre-merge:
    jobs:
      - basic-testing
      - setup-testing
      - build-ext: &build_ff
          name: build-firefox
          context: BookMyComics-Firefox
          requires:
          - basic-testing
      - test-browser-common: &common_ff
          name: test-firefox-common
          context: BookMyComics-Firefox
          requires:
          - build-firefox
          - setup-testing
      - test-browser:
          name: test-firefox-mangaeden
          context: BookMyComics-Firefox-MangaEden
          requires: &ff_requirements
          - test-firefox-common
      - test-browser-common: &common_chrome
          name: test-chrome-common
          context: BookMyComics-Chrome
          requires:
          - setup-testing
      - test-browser:
          name: test-chrome-mangaeden
          context: BookMyComics-Chrome-MangaEden
          requires: &chrome_requirements
          - test-chrome-common
  weekly:
    triggers:
      - schedule:
          cron: "0 0 * * 0"
          filters:
            branches:
              only:
                - master
    jobs:
      - basic-testing
      - setup-testing
      - build-ext: *build_ff
      - test-browser-common: *common_ff
      - test-browser:
          name: test-firefox-mangaeden
          context: BookMyComics-Firefox-MangaEden
          requires: *ff_requirements
      - test-browser:
          name: test-firefox-mangahere
          context: BookMyComics-Firefox-MangaHere
          requires: *ff_requirements
      - test-browser:
          name: test-firefox-mangareader
          context: BookMyComics-Firefox-MangaReader
          requires: *ff_requirements
      - test-browser:
          name: test-firefox-fanfox
          context: BookMyComics-Firefox-FanFox
          requires: *ff_requirements
      - test-browser:
          name: test-chrome-mangakakalot
          context: BookMyComics-Chrome-MangaKakalot
          requires: *ff_requirements
      - test-browser:
          name: test-chrome-manganelo
          context: BookMyComics-Chrome-MangaNelo
          requires: *ff_requirements
      - test-browser-common: *common_chrome
      - test-browser:
          name: test-chrome-mangaeden
          context: BookMyComics-Chrome-MangaEden
          requires: *chrome_requirements
      - test-browser:
          name: test-chrome-mangahere
          context: BookMyComics-Chrome-MangaHere
          requires: *chrome_requirements
      - test-browser:
          name: test-chrome-mangareader
          context: BookMyComics-Chrome-MangaReader
          requires: *chrome_requirements
      - test-browser:
          name: test-chrome-fanfox
          context: BookMyComics-Chrome-FanFox
          requires: *chrome_requirements
      - test-browser:
          name: test-chrome-mangakakalot
          context: BookMyComics-Chrome-MangaKakalot
          requires: *chrome_requirements
      - test-browser:
          name: test-chrome-manganelo
          context: BookMyComics-Chrome-MangaNelo
          requires: *chrome_requirements
